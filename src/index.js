import filters from './filters';
import components from './components';
import i18n from './i18n';
import utils from './utils';
import directives from './directives';
import axiosConfig from './axios';
import tokenService from './token';
import validate from './validate';
import Message,{errorMsg,successMsg} from './Message';
import mixins from './mixins/index';
import $ from 'jquery';
const pkg = require('../package.json');
//console.log(components)
/**
 *  加载需要的模块
 * ['i18n','filters'] 需要加载的模块，如果是对象,格式为{modulename:'',config:''}, modulename为模块名字，config为需要自定义的配置信息
 *  @param bwmodules <string|object>:{modulename:'',config:{}}
 * Vue instance
 *  @param Vue 
 * */ 
const install = (bwmodules,Vue,config)=>{
    let realModules = [];
    config = config || {};
    if(bwmodules){
      bwmodules.forEach(item=>{
        let modulename = '';
        if(typeof item==='string'){
          modulename = item;
        } else{
          modulename = item.modulename;
          if(item.config){
            config = Object.assign(config,item.config);
          }
        }
        const _module = getModule(modulename);//获取对应模块
        if(!_module)throw new Error('not found module: '+modulename);
        const defaultInstaller = _module.install;//加载需要的模块 install方法有两个参数 (Vue,config={})
          if(!defaultInstaller) {
            realModules[modulename] =_module; //不需要引用VUE的模块不需要 install 方法
          }else{
            realModules[modulename] = (defaultInstaller(Vue,config));
          }
      });
    }else{
      bwmodules = Object.keys(modulesModel);
      bwmodules.forEach(item=>{
        let modulename = '';
        if(typeof item==='string'){
          modulename = item;
         
        } else{
          modulename = item.modulename;
          
        }
        var tempconfig = {};
        if(config[modulename]){
          tempconfig = $.extend(true,{},config);
          tempconfig = $.extend(true,{},tempconfig,config[modulename]);
        }
        const _module = getModule(modulename);//获取对应模块
        if(!_module){console.log('not found module: '+modulename);return true;}
        const defaultInstaller = _module.install;//加载需要的模块 install方法有两个参数 (Vue,config={})
          if(!defaultInstaller) {
            realModules[modulename] =_module; //不需要引用VUE的模块不需要 install 方法
          }else{
            realModules[modulename] = (defaultInstaller(Vue,tempconfig));
          }
      });
    }
    return realModules;
  
}

const getModule = function(name){
  return modulesModel[name];
}
//可供加载的模块
const modulesModel = {
  filters,
  utils,
  axiosConfig,
  bwAxios:axiosConfig,
  tokenService,
  directives,
  mixins,
  // DataList,
   i18n,
   Message,
   components,
  // validate,
   ...components
};

export const bwFilters = filters;
export const bwUtils = utils;
export const bwAxios = axiosConfig;
export const bwTokenService = tokenService;
export const bwI18n = i18n;
export const bwMessage = Message;

export default {
    ...modulesModel,
    version:pkg.version,
    install
}


/* Automatically generated by './build/bin/build-entry.js' */

// import Pagination from '../packages/pagination/index.js';
// import Dialog from '../packages/dialog/index.js';
// import Notification from '../packages/notification/index.js';
// import Loading from '../packages/loading/index.js';
// import InfiniteScroll from '../packages/infinite-scroll/index.js';
// import locale from 'element-ui/src/locale';
// import CollapseTransition from 'element-ui/src/transitions/collapse-transition';

// const components = [
//   Pagination,
//   Dialog
// ];

// const install = function(Vue, opts = {}) {
//   locale.use(opts.locale);
//   locale.i18n(opts.i18n);

//   components.forEach(component => {
//     Vue.component(component.name, component);
//   });

//   Vue.use(InfiniteScroll);
//   Vue.use(Loading.directive);

//   Vue.prototype.$ELEMENT = {
//     size: opts.size || '',
//     zIndex: opts.zIndex || 2000
//   };

//   Vue.prototype.$loading = Loading.service;
//   Vue.prototype.$msgbox = MessageBox;
//   Vue.prototype.$alert = MessageBox.alert;
//   Vue.prototype.$confirm = MessageBox.confirm;
//   Vue.prototype.$prompt = MessageBox.prompt;
//   Vue.prototype.$notify = Notification;
//   Vue.prototype.$message = Message;

// };

// /* istanbul ignore if */
// if (typeof window !== 'undefined' && window.Vue) {
//   install(window.Vue);
// }

// export default {
//   version: '2.13.1',
//   locale: locale.use,
//   i18n: locale.i18n,
//   install,
//   CollapseTransition,
//   Loading
// };
